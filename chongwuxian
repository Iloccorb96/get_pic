import re
from playwright.sync_api import Page, expect
from playwright.sync_api import sync_playwright
from playwright.sync_api import Playwright, sync_playwright
import json
import time
import random
import uuid
import os
import subprocess
import traceback
import datetime
import pickle

fileList = []
currentReportNo = ""
currentProdCode = ""
currentFolder = ""
fileSeq = 1

## 修改该参数
basePath = r"C:\Users\wb_wangchenwei\Desktop\宠物险\就医标准建设\1原始图片\待获取\20231214"


def printLog(msg):
    print(f'{datetime.datetime.now()}  {msg}')


def imageFormat(basePath, fileName, ext):
    try:
        bytes = subprocess.Popen(f'magick identify {basePath}/{fileName}{ext}', shell=True,
                                 stdout=subprocess.PIPE).stdout.read()
        decoded_string = bytes.decode("utf-8")
        ## 输出样式 D:\20230920\2_6213_202302251100300609140984264669\0002.avif AVIF 1080x1920 1080x1920+0+0 8-bit sRGB 92198B 0.000u 0:00.000
        printLog(decoded_string)
        parts = decoded_string.split(" ")
        fileFormat = parts[1]
        printLog(f'Format: {fileFormat}')
        if fileFormat == "JPEG":
            return
        elif "PNG" in fileFormat:
            os.rename(f'{basePath}/{fileName}{ext}', f'{basePath}/{fileName}.png')
            convertFormatToJpg(basePath, fileName, "png")
        elif "AVIF" in fileFormat:
            os.rename(f'{basePath}/{fileName}{ext}', f'{basePath}/{fileName}.avif')
            convertFormatToJpg(basePath, fileName, "avif")
        elif "WEBP" in fileFormat:
            os.rename(f'{basePath}/{fileName}{ext}', f'{basePath}/{fileName}.webp')
            convertFormatToJpg(basePath, fileName, "webp")
        elif "GIF" in fileFormat:
            os.rename(f'{basePath}/{fileName}{ext}', f'{basePath}/{fileName}.gif')
            convertFormatToJpg(basePath, fileName, "gif")
        elif "BMP" in fileFormat:
            os.rename(f'{basePath}/{fileName}{ext}', f'{basePath}/{fileName}.bmp')
            convertFormatToJpg(basePath, fileName, "bmp")
        elif "TIFF" in fileFormat:
            os.rename(f'{basePath}/{fileName}{ext}', f'{basePath}/{fileName}.tiff')
            convertFormatToJpg(basePath, fileName, "tiff")
    except Exception as exc:
        printLog(exc)


def convertFormatToJpg(basePath, fileName, ext):
    bytes = subprocess.Popen(f'magick {basePath}/{fileName}.{ext} {basePath}/{fileName}.jpg', shell=True,
                             stdout=subprocess.PIPE).stdout.read()
    decoded_string = bytes.decode("utf-8")
    printLog(decoded_string)
    if os.path.exists(f'{basePath}/{fileName}.jpg'):
        printLog(f'图片 {basePath}/{fileName}.{ext} 格式转换成 {basePath}/{fileName}.jpg')
        os.remove(f'{basePath}/{fileName}.{ext}')


def onPageResponse(response):
    try:
        # 监听所有响应的状态码和链接
        # printLog(f'Statue {response.status}: {response.url}')
        if "showClaimInfo" in response.url:
            body = response.json()
            with open(f'{fullPath}' + '/body.pickle', "wb") as file:
                pickle.dump(body, file)

            printLog(body)
            if body["success"]:
                businessComponents = body["data"]["businessComponents"]
                for businessComponent in businessComponents:
                    if businessComponent["title"] == "凭证信息":
                        for item in businessComponent["items"]:
                            for option in item["options"]:
                                if option["desc"] == "医疗项目费用明细清单" or option["desc"] == "宠物费用清单" or option["desc"] == "身份证头像面" or option["desc"] == "身份证国徽面" or option["desc"] == "宠物化验单" or option["desc"] == "医疗诊断证明" or option["desc"] == "就诊病例" or option["desc"] == "正规医疗发票":
                                    printLog(f'待下载: {option["fileUrl"]}')
                                    fileList.append(option["fileUrl"])
    except Exception as exc:
        printLog(exc)


def onImageResponse(response):
    try:
        # 监听所有响应的状态码和链接
        if "mass.alipay.com" in response.url:
            printLog(f'Statue {response.status}: {response.url}')
            contentType = response.header_value("Content-Type")
            suffix = ".jpg"
            if contentType == "image/gif":
                suffix = ".gif"
            elif contentType == "image/jpg":
                suffix = ".jpg"
            elif contentType == "image/jpeg":
                suffix = ".jpg"
            elif contentType == "image/png":
                suffix = ".png"
            elif contentType == "image/tiff":
                suffix = ".tif"
            body = response.body()
            fileName = str(fileSeq).zfill(4)
            path = basePath + '/' + currentFolder + "/" + fileName + suffix
            f = open(path, 'wb')
            f.write(body)
            f.flush()
            printLog('下载' + response.url + " 地址 " + path)
            f.close()
            imageFormat(basePath + '/' + currentFolder, fileName, suffix)
            time.sleep(1)
    except Exception as exc:
        printLog(exc)


## 安装playwright
## pip install pytest-playwright
## playwright install

with sync_playwright() as playwright:
    ## 先手工打开chrome
    ## cd C:\Program Files\Google\Chrome\Application
    ## chrome.exe --remote-debugging-port=19222
    ## 然后执行该脚本
    browser = playwright.chromium.connect_over_cdp("http://localhost:19222")
    default_context = browser.contexts[0]

    printLog("开始获取案件数据")

    ## 如果查不到，重复三次
    retryCount = 3

    index = 0
    totalCount = len(os.listdir(basePath))
    ## 这里写一个循环，遍历所有案件
    for file in os.listdir(basePath):
        try:
            index = index + 1
            printLog(f'进度{(index * 100) // totalCount}%')
            fullPath = os.path.join(basePath, file)

            if not os.path.isdir(fullPath):
                continue

            subfiles = os.listdir(fullPath)
            if len(subfiles) > 1:
                printLog(f'文件{file}已获取图片数据')
                continue

            # file = "0_6213_202211021100300609800933761940"
            currentFolder = file
            parts = file.split("_")
            currentReportNo = file
            currentProdCode = "6213"
            printLog(f'处理案件 {currentFolder}')
            # currentReportNo = "202308111100300602680061413343"
            # currentProdCode = "6213"

            i = 0
            while i < retryCount:
                fileList.clear()
                fileSeq = 1
                i += 1

                page = default_context.new_page()

                page.on('response', onPageResponse)
                page.goto(
                    "https://claim.alipay.com/workbench/audit.htm#/search-center/integrated-query?claimReportNo=" + currentReportNo + "&prodCode=" + currentProdCode + "&showInfo=true")
                page.wait_for_load_state('networkidle')

                wait_sec = 0
                while len(fileList) == 0:
                    if wait_sec > 5:
                        break
                    time.sleep(1)
                    wait_sec = wait_sec + 1

                if len(fileList) == 0:
                    page.close()
                    time.sleep(1)

                if len(fileList) == 0:
                    printLog(f'文件{file}未获取图片数据')
                    rd = (int)(random.random() * 5)
                    ## 随机等待5-10秒
                    printLog(f'等待{1 + rd}秒')
                    time.sleep(1+rd)
                    continue

                for file in fileList:
                    downloadPage = default_context.new_page()
                    downloadPage.on('response', onImageResponse)
                    downloadPage.goto(file)
                    downloadPage.wait_for_load_state('networkidle')
                    time.sleep(1)
                    downloadPage.close()
                    fileSeq = fileSeq + 1

                try:
                    page.close()
                except Exception as exc2:
                    printLog(exc2)

                printLog(f'处理案件 {currentFolder} 完成')
                rd = (int)(random.random() * 5)
                ## 随机等待5-10秒
                printLog(f'等待{1 + rd}秒')
                time.sleep(1 + rd)

                break

            if i >= retryCount:
                printLog(f'文件{file}获取图片数据失败')

        except Exception as exc:
            printLog(exc)

    printLog("案件数据获取完成")
